namespace Robmikh.CompositionSurfaceFactory
{
    enum InterpolationMode
    {
        NearestNeighbor = 0,
        Linear = 1,
        Cubic = 2,
        MultiSampleLinear = 3,
        Anisotropic = 4,
        HighQualityCubic = 5,
    };

    enum TextHorizontalAlignment
    {
        Left = 0,
        Right = 1,
        Center = 2,
        Justified = 3,
    };

    enum TextVerticalAlignment
    {
        Top = 0,
        Bottom = 1,
        Center = 2,
    };

    enum WordWrapping
    {
        Wrap = 0,
        NoWrap = 1,
        EmergencyBreak = 2,
        WholeWord = 3,
        Character = 4,
    };

    struct Padding
    {
        Single Left;
        Single Right;
        Single Top;
        Single Bottom;
    };

    struct SurfaceFactoryOptions
    {
        Boolean UseSoftwareRenderer;
    };

    [marshaling_behavior(agile)]
    [webhosthidden]
    runtimeclass DeviceLostEventArgs
    {
        Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice Device { get; };
    }

    [marshaling_behavior(agile)]
    [threading(both)]
    [webhosthidden]
    runtimeclass DeviceLostHelper
    {
        DeviceLostHelper();

        Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice CurrentlyWatchedDevice { get; };
        void WatchDevice(Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice device);
        void StopWatchingCurrentDevice();
        event Windows.Foundation.EventHandler<DeviceLostEventArgs> DeviceLost;
    }

    [marshaling_behavior(agile)]
    [webhosthidden]
    runtimeclass Lock
    {
        Lock();

        LockSession GetLockSession();
    }

    [default_interface]
    [marshaling_behavior(agile)]
    [webhosthidden]
    runtimeclass LockSession : Windows.Foundation.IClosable
    {
    }

    [marshaling_behavior(agile)]
    [threading(both)]
    [webhosthidden]
    runtimeclass SurfaceFactory : Windows.Foundation.IClosable
    {
        Windows.UI.Composition.Compositor Compositor { get; };
        Windows.UI.Composition.CompositionGraphicsDevice GraphicsDevice { get; };
        Lock DrawingLock { get; };
        Windows.UI.Composition.CompositionDrawingSurface CreateSurface(Windows.Foundation.Size size);
        void ResizeSurface(Windows.UI.Composition.CompositionDrawingSurface surface, Windows.Foundation.Size size);
        [default_overload]
        UriSurface CreateUriSurface();
        UriSurface CreateUriSurface(Windows.Foundation.Uri uri);
        UriSurface CreateUriSurface(Windows.Foundation.Uri uri, Windows.Foundation.Size size);
        UriSurface CreateUriSurface(Windows.Foundation.Uri uri, Windows.Foundation.Size size, Robmikh.CompositionSurfaceFactory.InterpolationMode interpolation);
        [default_overload]
        Windows.Foundation.IAsyncOperation<UriSurface> CreateUriSurfaceAsync(Windows.Foundation.Uri uri);
        Windows.Foundation.IAsyncOperation<UriSurface> CreateUriSurfaceAsync(Windows.Foundation.Uri uri, Windows.Foundation.Size size);
        Windows.Foundation.IAsyncOperation<UriSurface> CreateUriSurfaceAsync(Windows.Foundation.Uri uri, Windows.Foundation.Size size, InterpolationMode interpolation);
        [default_overload]
        Robmikh.CompositionSurfaceFactory.TextSurface CreateTextSurface();
        Robmikh.CompositionSurfaceFactory.TextSurface CreateTextSurface(String text);
        Robmikh.CompositionSurfaceFactory.TextSurface CreateTextSurface(String text, Single width, Single height, String fontFamily, Single fontSize, Windows.UI.Text.FontStyle fontStyle, Robmikh.CompositionSurfaceFactory.TextHorizontalAlignment horizontalAlignment, Robmikh.CompositionSurfaceFactory.TextVerticalAlignment verticalAlignment, Robmikh.CompositionSurfaceFactory.WordWrapping wordWrapping, Robmikh.CompositionSurfaceFactory.Padding padding, Windows.UI.Color foregroundColor, Windows.UI.Color backgroundColor);
        event Windows.Foundation.EventHandler<Windows.UI.Composition.RenderingDeviceReplacedEventArgs> DeviceReplaced;

        static SurfaceFactory GetSharedSurfaceFactoryForCompositor(Windows.UI.Composition.Compositor compositor);
        static void ClearSharedSurfaceFactories();
        [default_overload]
        static Robmikh.CompositionSurfaceFactory.SurfaceFactory CreateFromCompositor(Windows.UI.Composition.Compositor compositor);
        static Robmikh.CompositionSurfaceFactory.SurfaceFactory CreateFromCompositor(Windows.UI.Composition.Compositor compositor, SurfaceFactoryOptions options);
        [default_overload]
        static SurfaceFactory CreateFromGraphicsDevice(Windows.UI.Composition.CompositionGraphicsDevice graphicsDevice);
        static SurfaceFactory CreateFromGraphicsDevice(Windows.UI.Composition.CompositionGraphicsDevice graphicsDevice, Lock lock);
    }

    [marshaling_behavior(agile)]
    [webhosthidden]
    runtimeclass SurfaceUtilities
    {
        static void FillSurfaceWithColor(SurfaceFactory surfaceFactory, Windows.UI.Composition.CompositionDrawingSurface surface, Windows.UI.Color color, Windows.Foundation.Size size);
        static void FillSurfaceWithColor(SurfaceFactory surfaceFactory, Windows.UI.Composition.CompositionDrawingSurface surface, Windows.UI.Color color);
        static void FillSurfaceWithDirect3DSurface(SurfaceFactory surfaceFactory, Windows.UI.Composition.CompositionDrawingSurface surface, Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface direct3DSurface, Windows.Foundation.Size size, Robmikh.CompositionSurfaceFactory.InterpolationMode interpolation);
        static void FillSurfaceWithDirect3DSurface(SurfaceFactory surfaceFactory, Windows.UI.Composition.CompositionDrawingSurface surface, Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface direct3DSurface, Windows.Foundation.Size size);
        static void FillSurfaceWithDirect3DSurface(SurfaceFactory surfaceFactory, Windows.UI.Composition.CompositionDrawingSurface surface, Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface direct3DSurface);
        static Windows.Foundation.IAsyncAction FillSurfaceWithUriAsync(SurfaceFactory surfaceFactory, Windows.UI.Composition.CompositionDrawingSurface surface, Windows.Foundation.Uri uri, Windows.Foundation.Size size, InterpolationMode interpolation);
        static Windows.Foundation.IAsyncAction FillSurfaceWithUriAsync(SurfaceFactory surfaceFactory, Windows.UI.Composition.CompositionDrawingSurface surface, Windows.Foundation.Uri uri, Windows.Foundation.Size size);
        static Windows.Foundation.IAsyncAction FillSurfaceWithUriAsync(SurfaceFactory surfaceFactory, Windows.UI.Composition.CompositionDrawingSurface surface, Windows.Foundation.Uri uri);
        static void FillSurfaceWithBytes(SurfaceFactory surfaceFactory, Windows.UI.Composition.CompositionDrawingSurface surface, UInt8[] bytes, Int32 widthInPixels, Int32 heightInPixels, Windows.Foundation.Size size, InterpolationMode interpolation);
        static void FillSurfaceWithBytes(SurfaceFactory surfaceFactory, Windows.UI.Composition.CompositionDrawingSurface surface, UInt8[] bytes, Int32 widthInPixels, Int32 heightInPixels, Windows.Foundation.Size size);
        static void FillSurfaceWithBytes(SurfaceFactory surfaceFactory, Windows.UI.Composition.CompositionDrawingSurface surface, UInt8[] bytes, Int32 widthInPixels, Int32 heightInPixels);
    }

    [marshaling_behavior(agile)]
    [webhosthidden]
    runtimeclass TextSurface : Windows.Foundation.IClosable
    {
        Windows.UI.Composition.Compositor Compositor { get; };
        SurfaceFactory SurfaceFactory { get; };
        Windows.UI.Composition.ICompositionSurface Surface { get; };
        Windows.Foundation.Size Size { get; };
        String Text;
        Single Width;
        Single Height;
        String FontFamily;
        Single FontSize;
        Windows.UI.Text.FontStyle FontStyle;
        TextHorizontalAlignment HorizontalAlignment;
        TextVerticalAlignment VerticalAlignment;
        WordWrapping WordWrapping;
        Padding Padding;
        Windows.UI.Color ForegroundColor;
        Windows.UI.Color BackgroundColor;
        void RedrawSurface();
        event Windows.Foundation.EventHandler<TextSurfaceRedrawnEventArgs> SurfaceRedrawn;
    }

    [marshaling_behavior(agile)]
    [webhosthidden]
    runtimeclass TextSurfaceRedrawnEventArgs
    {
        TextSurface Surface { get; };
        SurfaceFactory SurfaceFactory { get; };
    }

    [marshaling_behavior(agile)]
    [webhosthidden]
    runtimeclass UriSurface : Windows.Foundation.IClosable
    {
        Windows.UI.Composition.Compositor Compositor { get; };
        SurfaceFactory SurfaceFactory { get; };
        Windows.UI.Composition.ICompositionSurface Surface { get; };
        Windows.Foundation.Uri Source { get; };
        Windows.Foundation.Size Size { get; };
        InterpolationMode InterpolationMode { get; };
        [default_overload]
        Windows.Foundation.IAsyncAction RedrawSurfaceAsync();
        Windows.Foundation.IAsyncAction RedrawSurfaceAsync(Windows.Foundation.Uri uri);
        Windows.Foundation.IAsyncAction RedrawSurfaceAsync(Windows.Foundation.Uri uri, Windows.Foundation.Size size);
        Windows.Foundation.IAsyncAction RedrawSurfaceAsync(Windows.Foundation.Uri uri, Windows.Foundation.Size size, InterpolationMode interpolation);
        void Resize(Windows.Foundation.Size size);
    }
}
